/**
 * 数据类型
 * */
public class DataType{
    public static void main() throws Exception{
        System.out.println("DataType类执行了 (数据类型)");
        String[] arr = {
                "关于java中的数据类型",
                "1.数据类型的作用是什么?",
                "   程序当中有很多数据,每个数据都是有相关的数据类型,不同的数据类型的数据占用的空间大小不同,数据类型的作用是指导JVM在运行程序的时候给改数据分配多大的内存空间。",
                "2、java中的数据类型包括两种",
                "   * 基本数据类型",
                "   * 引用数据类型",
                "3、关于基本数据类型",
                "   * 基本数据类型包括4大类8小种:",
                "第一类: 整数型",
                "   byte,short,int,long",
                "第二类: 浮点型",
                "   float,double",
                "第三类: 布尔型",
                "   boolean",
                "第四类: 字符型",
                "   char",
                "4、字符串\"abc\"不属于基本数据类型,属于\"引用数据类型\",字符属于基本数据类型:",
                "   * 字符串使用双引号 \"abc\"",
                "   * 字符使用单引号   'a'",
                "5、八种数据类型各自占用空间大小是多少？",
                "   基本数据类型              占用空间大小【单位字节】",
                "   ----------------------------------",
                "   byte                    1",
                "   short                   2",
                "   int                     4",
                "   long                    8",
                "   float                   4",
                "   double                  8",
                "   boolean                 1",
                "   char                    2",
                "6、计算机在任何情况下都只能识别二进制。例如: 只认识10......",
                "   现代计算机底层采用交流电的方式,接通和断开就两种状态,计算机只识别1和0",
                "7、什么是二进制?",
                "   * 数据的表现形式。 十进制表示满十进一原则,二进制表示满二进一原则",
                "   例如: 十进制",
                "       0 1 2 3 4 5 6 7 8 9 10 12 13",
                "       0 1 10 11 100 101 110 111",
                "8、字节(byte):",
                "   1Byte = 8 bit",
                "   1KB = 1024Byte",
                "   1MB = 1024KB",
                "   1GB = 1024MB",
                "   1TB = 1024GB",
                "9、整数型当中Byte类型,占用一个字节,所以byte占用8个比特位, 那么byte的取值范围是什么?",
                "   * 关于java中的数据类型, 数字都是有正负之分的, 所以在数字的二进制当中有一个二进制位被称为\"符号位\"。并且这个\"符号位\"在所有二进制的最左边, 0表示正数, 1表示负数。",
                "   * byte类型最大值为01111111",
                "10、二进制和十进制的转换",
                "11、计算机只认识二进制,那么计算机是怎么表示现实世界当中文字呢？",
                "   * 八种数据类型当中, byte、short、int、long、float、double、boolean这7种数据类型计算机在表示的时候比较容易, 因为底层都是数字, 十进制和二进制之间存在固定的转换规则",
                "   * 但是八种数据类型当中char类型表示的是现实事件当中的文字, 文字和计算机二进制之间是默认不存在任何转换关系的",
                "   * 为了让计算机可以表示现实世界当中的文字, 我们需要进行人为的干涉, 需要人负责提前制定好文字和二进制之前的对照关系, 这种对照转换关系被称为: 字符编码",
                "   * 计算机最初只支持英文, 最早出现的字符编码是ASCII码",
                "       'a' --> 97          01100001",
                "       'A' --> 65",
                "       '0' --> 48",
                "       'a' --(按照ASCII解码)-->  01100001",
                "       01100001 --(按照ASCII编码)--> 'a'",
                "       编码和解码采用同一套字典/对照表, 不会乱码; 采用不同字典/对照表会出现乱码",
                "   * 随着计算机的发展, 后来出现了一种编码方式, 是国际化标准组织ISO制定的, 这种编码方式支持西欧语言, 向上兼容ACSII码,任然不支持中文。这种编码方式是: ISO-8859-1, 又被称为latin-1.",
                "   * 随着计算机开始向亚洲发展, 计算机开始支持中文等国家文字, 其中支持中文简体的编码方式: GB2312 < GBK < GB18030",
                "   * 支持繁体中文: 大五码<big5>",
                "   * 后来有一种编码方式统一了全球所有的文字, 容量较大, 这种编码方式叫做: unicode编码unicode编码方式有很多种具体的实现: ",
                "       - UTF-8",
                "       - UTF-16",
                "       - UTF-32",
                "       ......",
                "   * java语言源代码采用的是unicode编码方式, 所有\"标识符\"可以用中文",
                "   * 现在在实际开发中, 一般使用UTF-8编码方式较多。【统一编码方式】",
                "关于8种数据类型默认值",
                "数据类型                           默认值",
                "------------------------------------------",
                "byte,short,int,long                0",
                "float,double                       0.0",
                "boolean                            false",
                "char                               \u0000",
                "8种数据类型默认值一切向0看齐。",
                "反斜杠 \\ 在java语言当中具有转译功能",
                "所有想输出反斜杠 \\ 需要写两个反斜杠前面的反斜杠把后面的反斜杠转译成普通的反斜杠字符",
                "System.out.println()和System.out.print()的区别: println表示输出之后换行, print表示输出但不换行",
                "",
                "",
                "",

        };
        for (String i: arr) System.out.println(i);
        System.out.print(123);
        System.out.print('\t');
        System.out.print(456);
        System.out.print('\\');

    }
}